//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MushuRestaurant.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantDatabaseEntities : DbContext
    {
        public RestaurantDatabaseEntities()
            : base("name=RestaurantDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CatalogTable> CatalogTables { get; set; }
        public virtual DbSet<GeneralValue> GeneralValues { get; set; }
        public virtual DbSet<Jn> Jns { get; set; }
        public virtual DbSet<RequestCall> RequestCalls { get; set; }
        public virtual DbSet<CatalogTablesView> CatalogTablesViews { get; set; }
        public virtual DbSet<JnView> JnViews { get; set; }
        public virtual DbSet<CatalogHall> CatalogHalls { get; set; }
        public virtual DbSet<CalendarEvent> CalendarEvents { get; set; }
    
        public virtual ObjectResult<GetCatalogTablesByClose_Result> GetCatalogTablesByClose(Nullable<int> hallId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var hallIdParameter = hallId.HasValue ?
                new ObjectParameter("hallId", hallId) :
                new ObjectParameter("hallId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCatalogTablesByClose_Result>("GetCatalogTablesByClose", hallIdParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("RestaurantDatabaseEntities", "GetCloseTables")]
        public virtual IQueryable<GetCloseTables_Result> GetCloseTables(Nullable<int> hallId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> tableId)
        {
            var hallIdParameter = hallId.HasValue ?
                new ObjectParameter("hallId", hallId) :
                new ObjectParameter("hallId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var tableIdParameter = tableId.HasValue ?
                new ObjectParameter("tableId", tableId) :
                new ObjectParameter("tableId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCloseTables_Result>("[RestaurantDatabaseEntities].[GetCloseTables](@hallId, @fromDate, @toDate, @tableId)", hallIdParameter, fromDateParameter, toDateParameter, tableIdParameter);
        }
    }
}
